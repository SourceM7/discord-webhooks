name: Send Random Quran Verses

on:
  schedule:
    # Morning: 8:00 AM UTC (adjust timezone as needed)
    - cron: '0 8 * * *'
    # Night: 10:00 PM UTC (adjust timezone as needed)
    - cron: '0 22 * * *'
  workflow_dispatch:

env:
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  send-verses:
    runs-on: ubuntu-latest

    steps:
      - name: Install jq
        run: |
          sudo apt-get install -y jq --no-install-recommends

      - name: Fetch verses, build embed and send
        shell: bash
        run: |
          set -euo pipefail

          # Pick a random surah and starting ayah
          random_surah=$(( RANDOM % 114 + 1 ))  # 1-114 surahs
          
          # Get surah info to check total verses
          surah_info_json=$(curl -s "https://api.alquran.cloud/v1/surah/${random_surah}")
          total_ayahs_in_surah=$(echo "$surah_info_json" | jq -r '.data.numberOfAyahs')
          surah_name_ar=$(echo "$surah_info_json" | jq -r '.data.name')
          surah_name_en=$(echo "$surah_info_json" | jq -r '.data.englishName')
          
          # Pick a random starting ayah, ensuring we have room for 3-5 verses
          # Reduce number of verses if payload is still too large
          num_verses=$(( RANDOM % 2 + 2 ))  # Random between 2-3 verses only
          max_start_ayah=$(( total_ayahs_in_surah - num_verses + 1 ))
          if [ $max_start_ayah -lt 1 ]; then
            max_start_ayah=1
            num_verses=$total_ayahs_in_surah
          fi
          start_ayah=$(( RANDOM % max_start_ayah + 1 ))
          
          echo "Selected Surah $random_surah ($surah_name_en), ayahs $start_ayah to $(( start_ayah + num_verses - 1 ))"
          
          verses_content=""
          arabic_audio_files=()
          arabic_image_files=()
          
          # Get the entire surah first to access consecutive ayahs
          echo "Fetching complete surah data..."
          arabic_surah=$(curl -s "https://api.alquran.cloud/v1/surah/${random_surah}/ar.alafasy")
          tafseer_surah=$(curl -s "https://api.alquran.cloud/v1/surah/${random_surah}/ar.muyassar") 
          english_surah=$(curl -s "https://api.alquran.cloud/v1/surah/${random_surah}/en.asad")
          
          for i in $(seq 0 $(( num_verses - 1 ))); do
            current_ayah=$(( start_ayah + i ))
            ayah_index=$(( current_ayah - 1 ))  # Array is 0-indexed
            
            echo "Processing Surah $random_surah, Ayah $current_ayah (index $ayah_index)..."
            
            # Extract ayah data from surah arrays
            verse_text=$(echo "$arabic_surah" | jq -r ".data.ayahs[$ayah_index].text")
            tafseer_text=$(echo "$tafseer_surah" | jq -r ".data.ayahs[$ayah_index].text")
            english_text=$(echo "$english_surah" | jq -r ".data.ayahs[$ayah_index].text")
            audio_url=$(echo "$arabic_surah" | jq -r ".data.ayahs[$ayah_index].audio")

            echo "Verse text: ${verse_text:0:50}..."
            echo "Tafseer: ${tafseer_text:0:50}..."

            # Add verse content to collection (shortened format)
            verse_display_num=$(( i + 1 ))
            
            # Truncate long texts to fit Discord limits
            short_tafseer=$(echo "$tafseer_text" | cut -c1-200)
            short_english=$(echo "$english_text" | cut -c1-200)
            
            if [ ${#tafseer_text} -gt 200 ]; then
              short_tafseer="${short_tafseer}..."
            fi
            if [ ${#english_text} -gt 200 ]; then
              short_english="${short_english}..."
            fi
            
            if [ $i -eq 0 ]; then
              verses_content="**${verse_display_num}.** ﴿ **${verse_text}** ﴾\n**تفسير:** ${short_tafseer}\n**English:** ${short_english}"
            else
              verses_content="${verses_content}\n\n**${verse_display_num}.** ﴿ **${verse_text}** ﴾\n**تفسير:** ${short_tafseer}\n**English:** ${short_english}"
            fi

            # Download image and audio for first verse only
            if [ $i -eq 0 ]; then
              img_url="https://cdn.islamic.network/quran/images/high-resolution/${random_surah}_${current_ayah}.png"
              img_file="ayah_${random_surah}_${current_ayah}.png"

              curl -s -o "$img_file" "$img_url"
              arabic_image_files+=("$img_file")

              safe_surah=$(echo "$surah_name_ar" | tr ' ' _)
              audio_file="${safe_surah}_${current_ayah}.mp3"
              curl -s -o "$audio_file" "$audio_url"
              arabic_audio_files+=("$audio_file")
            fi
          done

          # Get surah name for the title
          surah_name_ar=$(echo "$surah_info_json" | jq -r '.data.name')
          surah_name_en=$(echo "$surah_info_json" | jq -r '.data.englishName')

          # Determine time of day for title
          current_hour=$(date -u +%H)
          if [ $current_hour -lt 12 ]; then
            time_greeting="🌅 Daily Quran"
          else
            time_greeting="🌙 Daily Quran"
          fi

          # Create comprehensive payload with surah context
          payload=$(jq -n \
            --arg content "$verses_content" \
            --arg title "$time_greeting" \
            --arg surah_ar "$surah_name_ar" \
            --arg surah_en "$surah_name_en" \
            --arg start_ayah "$start_ayah" \
            --arg end_ayah "$(( start_ayah + num_verses - 1 ))" \
            '{
              embeds: [
                {
                  title: $title,
                  description: $content,
                  color: 36864,
                  footer: {
                    text: ($surah_ar + " (" + $surah_en + ") - Verses " + $start_ayah + "-" + $end_ayah)
                  },
                  timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                }
              ]
            }')

          echo "Payload size: $(echo "$payload" | wc -c) characters"
          
          # If payload is still too large, send a simpler version
          payload_size=$(echo "$payload" | wc -c)
          if [ $payload_size -gt 4000 ]; then
            echo "Payload too large ($payload_size chars), creating simplified version..."
            
            # Create ultra-simple version with just Arabic and basic info
            simple_content=""
            for i in $(seq 0 $(( num_verses - 1 ))); do
              current_ayah=$(( start_ayah + i ))
              ayah_index=$(( current_ayah - 1 ))
              
              verse_text=$(echo "$arabic_surah" | jq -r ".data.ayahs[$ayah_index].text")
              verse_display_num=$(( i + 1 ))
              
              if [ $i -eq 0 ]; then
                simple_content="**${verse_display_num}.** ﴿ ${verse_text} ﴾"
              else
                simple_content="${simple_content}\n\n**${verse_display_num}.** ﴿ ${verse_text} ﴾"
              fi
            done
            
            payload=$(jq -n \
              --arg content "$simple_content" \
              --arg title "$time_greeting" \
              --arg surah_ar "$surah_name_ar" \
              --arg surah_en "$surah_name_en" \
              --arg start_ayah "$start_ayah" \
              --arg end_ayah "$(( start_ayah + num_verses - 1 ))" \
              '{
                embeds: [
                  {
                    title: $title,
                    description: $content,
                    color: 36864,
                    footer: {
                      text: ($surah_ar + " (" + $surah_en + ") - Verses " + $start_ayah + "-" + $end_ayah)
                    },
                    timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
                  }
                ]
              }')
              
            echo "Simplified payload size: $(echo "$payload" | wc -c) characters"
          fi

          # Send the comprehensive message with attachments from first verse
          if [ ${#arabic_audio_files[@]} -gt 0 ] && [ ${#arabic_image_files[@]} -gt 0 ]; then
            curl --fail -X POST "$DISCORD_WEBHOOK_URL" \
                 -F "payload_json=$payload" \
                 -F "file1=@${arabic_audio_files[0]}" \
                 -F "file2=@${arabic_image_files[0]}"
          else
            curl --fail -X POST "$DISCORD_WEBHOOK_URL" \
                 -H "Content-Type: application/json" \
                 -d "$payload"
          fi

          # Clean up files
          rm -f *.png *.mp3
